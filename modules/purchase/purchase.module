<?php

/*
function purchase_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

}
*/

function purchase_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    //dsm($form);
    if (\Drupal::currentUser()->isAnonymous()) {
        $form['field_last_payment_money']['#attributes']['class'][] = 'hidden';
    }
    $form['actions']['submit']['#submit'][] = '_insert_user';
}

function _insert_user(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $user_id = $form_state->getValue('uid');
    $user_storage = \Drupal::entityManager()->getStorage('user');
    $user = $user_storage->load($user_id);
    $user->langcode->value = 'en';
    $user->field_email->value = $user->init->value;
    $user_storage->save($user);
}

// alter user form
function purchase_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $form['actions']['submit']['#submit'][] = '_update_user';
    $form['field_last_payment_money']['widget'][0]['value']['#default_value'] = 0;
    if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
        $form['field_last_payment_money']['#attributes']['class'][] = 'hidden';
    }
}

function _update_user(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $user_id = $form_state->getValue('uid');
    $last_payment_money = $form_state->getValue('field_last_payment_money')[0]['value'];
    $user_storage = \Drupal::entityManager()->getStorage('user');
    $user = $user_storage->load($user_id);

    $user->field_email->value = $user->mail->value;

    if (isset($last_payment_money) && $last_payment_money > 0) {
        $payment_money = $user->field_payment_money->value;
        $debt = $user->field_debt->value;
        $total_money = $user->field_total_money->value;

        // update payment money
        if (isset($payment_money)) {
            $payment_money += $last_payment_money;
        } else {
            $payment_money = $last_payment_money;
        }
        // update debt money
        $debt = $total_money - $payment_money;

        // assign to fields and save to db
        $user->field_payment_money->value = $payment_money;
        $user->field_debt->value = $debt;
        $user->field_last_payment_date->value = REQUEST_TIME;
    }
    $user_storage->save($user);
}

// alter facebook product node form
function purchase_form_node_facebook_product_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form['actions']['submit']['#submit'][] = '_insert_purchased_product';
    $form['actions']['publish']['#submit'][] = '_insert_purchased_product';
    $form['actions']['unpublish']['#submit'][] = '_insert_purchased_product';

    array_unshift($form['actions']['submit']['#submit'], '_pre_submit_form');
    array_unshift($form['actions']['publish']['#submit'], '_pre_submit_form');
    array_unshift($form['actions']['unpublish']['#submit'], '_pre_submit_form');
}

function purchase_form_node_facebook_product_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form['actions']['submit']['#submit'][] = '_update_purchased_product';
    $form['actions']['publish']['#submit'][] = '_update_purchased_product';
    $form['actions']['unpublish']['#submit'][] = '_update_purchased_product';

    array_unshift($form['actions']['submit']['#submit'], '_pre_submit_form');
    array_unshift($form['actions']['publish']['#submit'], '_pre_submit_form');
    array_unshift($form['actions']['unpublish']['#submit'], '_pre_submit_form');
}

function _pre_submit_form(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $image_link = $form_state->getValue('field_image_links')[0]['uri'];
    $image_link = _getRealFacebookImageLink($image_link);
    //$form_state->setValue('field_image_links', $image_link);
    $form_state->getValue('field_image_links')[0]['uri'] = $image_link;
}

function _insert_purchased_product(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    //$nids = db_select('node', 'e')->fields('e', array('nid'))->orderBy('nid', 'DESC')->execute()->fetchAll();
    //$product_id = $nids[0]->nid;
    $product_id = $form_state->getValue('nid');
    $quantity = $form_state->getValue('field_quantity')[0]['value'];
    $price = $form_state->getValue('field_price')[0]['value'];
    //$image_links = $form_state->getValue('field_image_links')[0]['uri'];
    $customer_id = $form_state->getValue('field_customer')[0]['target_id'];
    $note = $form_state->getValue('body')[0]['value'];
    $status_id = $form_state->getValue('field_status')[0]['target_id'];
    $total_price = $price * $quantity;
    $user_storage = \Drupal::entityManager()->getStorage('user');
    $customer = \Drupal\user\Entity\User::load($customer_id);

    // update user
    if ($status_id != 3) {
        if (!isset($customer->field_total_money->value)) {
            $customer->field_total_money->value = $total_price;
        } else {
            $customer->field_total_money->value += $total_price;
        }
        /*
        if (!isset($customer->field_payment_money->value)) {
            $customer->field_payment_money->value = 0;
        }
        */
        $customer->field_debt->value = $customer->field_total_money->value - $customer->field_payment_money->value;
        $user_storage->save($customer);
    }

    // insert new row
    $fields = array(
        'product_id' => $product_id,
        'user_id' => $customer_id,
        'quantity' => $quantity,
        'price' => $price,
        'total_price' => $total_price,
        //'image_url' => $image_links,
        'status' => $status_id,
        'note' => $note,
        'date' => time()
    );
    db_insert('product_user_relationship')->fields($fields)->execute();

    $form_state->setRedirectUrl(\Drupal\Core\Url::fromUserInput('/node/add/facebook_product'));
}

function _update_purchased_product(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    //$nids = db_select('node', 'e')->fields('e', array('nid'))->orderBy('nid', 'DESC')->execute()->fetchAll();
    //$product_id = $nids[0]->nid;
    $product_id = $form_state->getValue('nid');
    $quantity = $form_state->getValue('field_quantity')[0]['value'];
    $price = $form_state->getValue('field_price')[0]['value'];
    //$image_links = $form_state->getValue('field_image_links')[0]['uri'];
    $customer_id = $form_state->getValue('field_customer')[0]['target_id'];
    $note = $form_state->getValue('body')[0]['value'];
    $status_id = $form_state->getValue('field_status')[0]['target_id'];
    $total_price = $price * $quantity;
    $user_storage = \Drupal::entityManager()->getStorage('user');
    $customer = \Drupal\user\Entity\User::load($customer_id);

    $query = db_select('product_user_relationship', 'e')
        ->condition('product_id', $product_id)
        ->fields('e', array('status', 'total_price'))
        ->execute()->fetchAll();
    $old_product = $query[0];
    $old_total_price = $old_product->total_price;
    $old_status_id = $old_product->status;

    // update user
    if ($old_status_id != 3) {
        if (isset($customer->field_total_money->value)) {
            $customer->field_total_money->value -= $old_total_price;
        }
    }
    if ($status_id != 3) {
        $customer->field_total_money->value += $total_price;
    }
    $customer->field_debt->value = $customer->field_total_money->value - $customer->field_payment_money->value;
    $user_storage->save($customer);

    // insert new row
    $fields = array(
        'quantity' => $quantity,
        'price' => $price,
        'total_price' => $total_price,
        //'image_url' => $image_links,
        'status' => $status_id,
        'note' => $note,
    );
    db_update('product_user_relationship')
        ->condition('product_id', $product_id)
        ->fields($fields)
        ->execute();

    $form_state->setRedirectUrl(\Drupal\Core\Url::fromUserInput('/node/add/facebook_product'));
}

/**
 * Implements hook_block_access().
 */
function purchase_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {
    if ($block->getPluginId() == 'system_menu_block:customer-menu' && $operation == 'view') {
        $roles = $account->getRoles();
        if (in_array('administrator', $roles)) {
            return \Drupal\Core\Access\AccessResult::forbidden();
        }
    }

    return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_user_login().
 */
function purchase_user_login($account) {
    global $base_path;

    $roles = $account->getRoles();
    if (in_array('administrator', $roles)) {
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse($base_path . "products");
        $response->send();
    } else if (in_array('authenticated', $roles)) {
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse($base_path . "user-detail/general");
        $response->send();
    } else {
        //$response = new \Symfony\Component\HttpFoundation\RedirectResponse($base_path . "user/login");
    }
    return;
}

function purchase_theme() {
    return array(
        'create_multiple_products' => array(
            'variables' => array(),
            'template' => 'create-multiple-products',
        ),
    );
}

function _getRealFacebookImageLink($url) {
    if (strpos($url, 'www.facebook.com')) {
        $arr = explode('/', $url);
        $photo_id = $arr[6];
        $url = 'http://graph.facebook.com/' . $photo_id . '/picture';
        return get_final_url($url);
    }
    return $url;
}

/**
 * get_redirect_url()
 * Gets the address that the provided URL redirects to,
 * or FALSE if there's no redirect.
 *
 * @param string $url
 * @return string
 */
function get_redirect_url($url){
    $redirect_url = null;

    $url_parts = @parse_url($url);
    if (!$url_parts) return false;
    if (!isset($url_parts['host'])) return false; //can't process relative URLs
    if (!isset($url_parts['path'])) $url_parts['path'] = '/';

    $sock = fsockopen($url_parts['host'], (isset($url_parts['port']) ? (int)$url_parts['port'] : 80), $errno, $errstr, 30);
    if (!$sock) return false;

    $request = "HEAD " . $url_parts['path'] . (isset($url_parts['query']) ? '?'.$url_parts['query'] : '') . " HTTP/1.1\r\n";
    $request .= 'Host: ' . $url_parts['host'] . "\r\n";
    $request .= "Connection: Close\r\n\r\n";
    fwrite($sock, $request);
    $response = '';
    while(!feof($sock)) $response .= fread($sock, 8192);
    fclose($sock);

    if (preg_match('/^Location: (.+?)$/m', $response, $matches)){
        if ( substr($matches[1], 0, 1) == "/" )
            return $url_parts['scheme'] . "://" . $url_parts['host'] . trim($matches[1]);
        else
            return trim($matches[1]);

    } else {
        return false;
    }

}

/**
 * get_all_redirects()
 * Follows and collects all redirects, in order, for the given URL.
 *
 * @param string $url
 * @return array
 */
function get_all_redirects($url){
    $redirects = array();
    while ($newurl = get_redirect_url($url)){
        if (in_array($newurl, $redirects)){
            break;
        }
        $redirects[] = $newurl;
        $url = $newurl;
    }
    return $redirects;
}

/**
 * get_final_url()
 * Gets the address that the URL ultimately leads to.
 * Returns $url itself if it isn't a redirect.
 *
 * @param string $url
 * @return string
 */
function get_final_url($url){
    $redirects = get_all_redirects($url);
    if (count($redirects)>0){
        return array_pop($redirects);
    } else {
        return $url;
    }
}